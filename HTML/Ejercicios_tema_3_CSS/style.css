

/*height: 50vh;*/

/*background-image sirve para poner una imagen de fondo y dentro de los paréntesis de la url ponemos dónde se encuentra la imagen a poner de fondo */
/* background-image: url(); */

/* eje x: left center right // eje y: top center bottom
background-position: center bottom; */

/* background-attachment: fixed; */

/* Cuando la imagen es más pequeña que el contenedor */
/* background-repeat: no-repeat;
background-size: contain; */

/* Márgenes */
/* margin: 10px;
margin-right: 10px;
margin-bottom: 10px;
margin-left: 10px;
margin-top: 10px; */

/* padding: 100 px //bottom y top 25px // left y right
padding: 100 px 25px 50px 2px //va en sentido de las agujas del reloj; top, right, bottom, left */



/* Posicionamiento. Tipos de Display: none, inline, block, inline-block */

/*[class^="box"] {
    background-color: steelblue;*/

/*El sombrerito ^ que se pone delante del = significa que se aplique a todas las clases que empiecen por "box" */

.box-0 {
    display: none; 
} /* display: none se utiliza para ocultar elementos */

.box-3, .box-4, .box-3 p, .box-4 p {
    display: inline-block;
}

.box-5, .box-6, .box-5 p, .box-6 p {
    display: inline;
}

.rectangle {
    background-color: teal;
    height: 50px;
    width: 25%;
}

/* Centrar horizontalmente (eje X) */

.x-centered {
    margin: auto;
} /* margin: auto, centra horizontalmente el contenedor */

/* Posición relativa */

.pos-relative {
    position: relative;
    left: 100px;
    top: -50px;
    z-index: -1;
}

/* Posición absoluta */

.pos-absolute-parent {
    height: 300px;
    border: 15px solid tomato;
    position: relative;
    
}

.pos-absolute-child {
    height: 50px;
    width: 50px;
    background-color: #333;
    position: absolute; /* posición absoluta respecto al padre */
    top: 50%;
    left: 50%;
    margin-left: -25px;
    margin-top: -25px;
}

/* Posición fija/ fixed */

.pos-fixed {
    background-color: #333;
    padding: 20px 30px;
    position: fixed; /* el botón se quedaría fijo respecto a la página */
    bottom: 30px;
    right: 30px;
    z-index: 1;
}

.pos-fixed a {
    color: white;
    text-decoration: none;
}

/* Posición sticky */ 

.pos-sticky {
    background-color: steelblue;
    padding: 15px 25px;
    position: sticky; /* Se queda el texto fijo mientras no muevas el scroll hacia abajo, si lo haces, el texto se va escondiendo, sigue al scroll */ 
    top: 0;
}

.pos-sticky a {
    text-decoration: none;
    color: white;
}

/* Posicionamiento flotante: divs dentro de otros divs */

.pos-float-parent {
    border: 5px solid royalblue;
    color: white;
    /* overflow: hidden; sirve para controlar el desbordamiento. Respeta, por tanto, todo el contenido (para que el padre no colapse si todos los hijos son flotantes. Se le obliga que respete a los hijos */
}

.pos-float-child-1 {
    background-color: brown;
    height: 100px;
    width: 33.3%;
    float: left;
}

.pos-float-child-2 {
    background-color: darkblue;
    height: 100px;
    width: 33.3%;
    float: left; 
}

.pos-float-child-3 {
    background-color: darkorange;
    height: 100px;
    width: 33.3%;
    float: left; 
}

.pos-float-child-4 {
    background-color: yellowgreen;
    height: 50px;
    width: 100%;
    clear: both; /* Garantiza que no va a colapsar un flotante y empieza en una línea limpia */
}

/* Overflow - Gestión del desbordamiento del contenido */

[class^="overflow-parent"] {
    width: 200px;
    height: 100px;
    border: 3px dashed black;
    margin-bottom: 150px;
}

.overflow-parent-1 {
   overflow: hidden;
}

.overflow-parent-2 {
    overflow: visible;
}

.overflow-parent-3 {
    overflow: scroll;
}

/* Tamaño de cajas (box-sizing) */

.box-sizing-parent {
    width: 200px;
    height: 200px;
    border: 10px solid goldenrod;
}

.box-sizing-child {
    width: 100%;
    height: 50px;
    background-color: gray;
    border: 10px solid darkolivegreen;
    box-sizing: content-box; /* valor por defecto */
}

.border-box {
    margin-top: 10px;
    box-sizing: border-box;
}

h1 {
    border: 2px solid gray;
    width: 100%;
    padding: 25px;
    float: left; 

}

.inputBlock {
    float: right;

}

.p-f-parent {
    border: 2px solid gray;
}

p::first-letter {
    font-size: 3em;
    color: crimson;
} /* no existen individualmente en html, es decir, no tienen etiqueta, pero se puede utlizar en un determinado momento */


/* Media queries. Se ponen en último lugar en el css */

.responsive { /* Escritorio/ Desktop */
    height: 100px;
    background-color: aquamarine;
    width: 30%;
}

@media only screen and (max-width: 920px) { /* Tablet */
    .responsive {
        width: 500%;
    }
}


@media only screen and (max-width: 700px) { /* Móviles/ Mobile */
    .responsive {
        width: 100%;
    }
}

/* Si queremos empezar a diseñar para los móviles, en lugar de utilizar max-width, utilizamos min-width */

/* Flexbox */ /* Por defecto todos los elementos flex tienen un flex-grow: 0;*/

.flex-parent {
    height: 250px;
    border: 2px solid #333;
    display: flex;
    /*flex-direction: row; /* row significa fila */
    /*flex-wrap: wrap; /*cuando no quepa todo el contenido, el último que no quepa te lo envía automáticamente a la siguiente línea*/
    /*flex-flow: row wrap; atajo para combinar ambas propiedades que hemos utilizado justo arriba*/
    justify-content: center;
    justify-content: flex-start;
    justify-content: flex-end;
    justify-content: space-around; /*sirve para dar más aire por dentr a los elementoos*/
    justify-content: space-between;
    justify-content: space-evenly; /*reparte los espacios de forma equitativa*/

    /*align-items: center;
    align-items: flex-start;
    align-items: flex-end;
    align-items: stretch; /*los hijos se expanden verticalmente*/
}

.flex-child {
    width: 250px;
    display: flex; /*hemos convertido cada caja en un contenedor flex*/
    justify-content: center; /* el contenido se centra horizontalmente*/
    align-items: center; /*el contenido se centra verticalmente*/
}

.flex-parent > div:nth-child(odd) { /* odd seleciona los impares */
    background-color: #ddd;
    color:#333;
}

.flex-parent > div:nth-child(even) { /* even selecciona los pares */
    background-color: #333;
    color:#ddd;
}

.flex-child-1 {
    /*flex-grow: 0;
    flex-shrink: 2;
    flex-basis: 250px;*/
    flex: 0 2 auto;
}

.flex-child-2 {
    /*flex-grow: 1;
    flex-shrink: 3;
    flex-basis: 250px;*/
    flex: 1 3 auto;
    align-self: center; /*sobreescribe lo que diga el padre. Hay que tener cuidado a la hora de utilizarlo*/
}

.flex-child-3 {
    /*flex-grow: 2;
    flex-shrink: 1;
    flex-basis: 250px;*/
    flex: 2 1 250px;
}

/* CSS Grid básico con medias queries */

[class^="grid-child"] {
    background-color: coral;
    display: flex;
    justify-content: center;
    align-items: center;
}

.grid-parent {
    display: grid;
    grid-template-columns: 1fr 2fr 1fr;
    /*grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); minmax significa el mínimo y el máximo que queremos especificar y auto-fit te va a colocar automáticamente las columnas hasta que quepan en el minmax que hemos espcificado*/
    grid-template-rows: 1fr 2fr; /* para repetir este mismo patrón pondríamos la propiedad repeat(2, 1fr, 2fr). Este ejemplo significa que me repita dos veces ese patrón, el primer número es el número de veces que queremos repetir*/
    gap: 10px; /*para dar espacio. Crea una intersección*/
}

@media only screen and (max-width: 920px) {
    .grid-parent {
        grid-template-columns: 1fr 2fr;
    }
}

@media only screen and (max-width: 768px) {
    .grid-parent {
        grid-template-columns: 1fr;
    }
} 

/*CSS Grid por líneas*/

.grid-parent-2 {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(4, 1fr);
    gap: 10px;
}

.grid-parent-2 > .grid-child-1 {
    grid-column: 1 / 3; /* significa de la línea 1 a la 3 */
    grid-row: 1; /* equivalente a grid-row: 1 / 2 (fila) */
}

.grid-parent-2 > .grid-child-2 {
    grid-column: 3; 
    grid-row: 1 / 3; 
}

.grid-parent-2 > .grid-child-3 {
    grid-column: 1 / 3; 
    grid-row: 2 / 5; 
    opacity: 0.5;
    z-index: -1;
}

.grid-parent-2 > .grid-child-4 {
    grid-column: 3; 
    grid-row: 3; 
}

.grid-parent-2 > .grid-child-5 {
    grid-column: 2 / 4; 
    grid-row: 4; 
}

.grid-parent-2 > .grid-child-6 {
    grid-column: 1; 
    grid-row: 2; 
}

/* CSS Grid por áreas */

.grid-parent-3 {
    display: grid;
    gap: 10px;

    grid-template-columns: 150px 1fr 1fr;
    grid-template-rows: 1fr 4fr 1fr;

    grid-template-areas: "nav nav ." /* podemos poner un . en uno de los huecos para decir que ese hueco quede en blanco*/
                         "content1 content2 content3"
                         "footer footer footer"; /*disposición de lo que queremos con el nombre que queramos*/
}

.grid-parent-3 > .grid-child-1 {
    grid-area: nav;
}

.grid-parent-3 > .grid-child-2 {
    grid-area: content1;
}

.grid-parent-3 > .grid-child-3 {
    grid-area: content2;
}

.grid-parent-3 > .grid-child-4 {
    grid-area: content3;
}

.grid-parent-3 > .grid-child-5 {
    grid-area: footer;
}



